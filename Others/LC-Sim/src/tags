!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AFFINITY_FILE	utility/Makefile	/^AFFINITY_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts.sw_affinity.txt$/;"	m
AFFINITY_RANDOM_FILE	utility/Makefile	/^AFFINITY_RANDOM_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_RANDOM_HOST}hosts_random.sw_affinity.txt$/;"	m
AFFINITY_SCALE_FILE	utility/Makefile	/^AFFINITY_SCALE_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts_scale.sw_affinity.txt$/;"	m
AFFINITY_SCALE_FILE2	utility/Makefile	/^AFFINITY_SCALE_FILE2=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts_scale2.sw_affinity.txt$/;"	m
AFFINITY_SCALE_FILE3	utility/Makefile	/^AFFINITY_SCALE_FILE3=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts_scale3.sw_affinity.txt$/;"	m
AGG_FILE	utility/Makefile	/^AGG_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts.agg.txt$/;"	m
AGG_RANDOM_FILE	utility/Makefile	/^AGG_RANDOM_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_RANDOM_HOST}hosts_random.agg.txt$/;"	m
AGG_SCALE_FILE	utility/Makefile	/^AGG_SCALE_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts_scale.agg.txt$/;"	m
AGG_SCALE_FILE2	utility/Makefile	/^AGG_SCALE_FILE2=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts_scale2.agg.txt$/;"	m
AGG_SCALE_FILE3	utility/Makefile	/^AGG_SCALE_FILE3=..\/result\/traffic_record_1day\/flow_anon_2008-01-01_${NUM_HOST}hosts_scale3.agg.txt$/;"	m
AggSwitch	switch.py	/^class AggSwitch(Switch):$/;"	c
BloomFilter	bf.py	/^class BloomFilter:$/;"	c
BloomFilter_128	bf.py	/^class BloomFilter_128(BloomFilter):$/;"	c
BloomFilter_256	bf.py	/^class BloomFilter_256(BloomFilter):$/;"	c
BloomFilter_32k	bf.py	/^class BloomFilter_32k(BloomFilter):$/;"	c
BloomFilter_4k	bf.py	/^class BloomFilter_4k(BloomFilter):$/;"	c
CUT	utility/Makefile	/^CUT=.\/cut.py$/;"	m
CoreSwitch	switch.py	/^class CoreSwitch(Switch):$/;"	c
Cut	utility/cut.py	/^class Cut:$/;"	c
DC	dc.py	/^class DC:$/;"	c
DEFALUT_GROUP_ID	defs.py	/^DEFALUT_GROUP_ID = -1 #means un-grouped, only used for initialization.$/;"	v
EdgeSwitch	switch.py	/^class EdgeSwitch(Switch):$/;"	c
FatTree	topo.py	/^class FatTree(Topo):$/;"	c
Flat	topo.py	/^class Flat(Topo):$/;"	c
Group	group.py	/^class Group:$/;"	c
METIS_INPUT	utility/Makefile	/^METIS_INPUT=..\/result\/metis_result\/metis_input_${NUM_HOST}.txt$/;"	m
METIS_INPUT_RANDOM	utility/Makefile	/^METIS_INPUT_RANDOM=..\/result\/metis_result\/metis_input_${NUM_RANDOM_HOST}hosts_random.txt$/;"	m
METIS_INPUT_SCALE	utility/Makefile	/^METIS_INPUT_SCALE=..\/result\/metis_result\/metis_input_${NUM_HOST}hosts_scale.txt$/;"	m
METIS_INPUT_SCALE2	utility/Makefile	/^METIS_INPUT_SCALE2=..\/result\/metis_result\/metis_input_${NUM_HOST}hosts_scale2.txt$/;"	m
METIS_INPUT_SCALE3	utility/Makefile	/^METIS_INPUT_SCALE3=..\/result\/metis_result\/metis_input_${NUM_HOST}hosts_scale3.txt$/;"	m
NUM_HOST	utility/Makefile	/^NUM_HOST=6509$/;"	m
NUM_RANDOM_HOST	utility/Makefile	/^NUM_RANDOM_HOST=65000$/;"	m
NUM_SW_PORT	utility/preprocess.py	/^NUM_SW_PORT = 24$/;"	v
PREPROCESS	utility/Makefile	/^PREPROCESS=.\/preprocess.py$/;"	m
PROG_CUT	sim.py	/^PROG_CUT = '.\/mincut'$/;"	v
PROG_CUT	utility/cut.py	/^PROG_CUT = '.\/mincut'$/;"	v
RECORD_FILE	utility/Makefile	/^RECORD_FILE=..\/result\/traffic_record_1day\/flow_anon_2008-01-01.record.txt$/;"	m
Random	topo.py	/^class Random(Topo):$/;"	c
SpellChecker	bf.py	/^class SpellChecker(BloomFilter):$/;"	c
StatCollector	statCollector.py	/^class StatCollector:$/;"	c
Switch	switch.py	/^class Switch:$/;"	c
Topo	topo.py	/^class Topo:$/;"	c
VM	vm.py	/^class VM:$/;"	c
__contains__	bf.py	/^    def __contains__(self, key):$/;"	m	class:BloomFilter	file:
__init__	bf.py	/^    def __init__(self, iterable=()):$/;"	m	class:BloomFilter_32k
__init__	bf.py	/^    def __init__(self, num_bytes, num_probes, iterable=()):$/;"	m	class:BloomFilter
__init__	bf.py	/^    def __init__(self, num_probes=13, iterable=()):$/;"	m	class:BloomFilter_4k
__init__	bf.py	/^    def __init__(self, num_probes=8, iterable=()):$/;"	m	class:BloomFilter_128
__init__	bf.py	/^    def __init__(self, num_probes=8, iterable=()):$/;"	m	class:BloomFilter_256
__init__	bf.py	/^    def __init__(self, wordlistfiles, estimated_word_count=125000):$/;"	m	class:SpellChecker
__init__	dc.py	/^    def __init__(self, topo=()):$/;"	m	class:DC
__init__	group.py	/^    def __init__(self, id=DEFALUT_GROUP_ID):$/;"	m	class:Group
__init__	statCollector.py	/^    def __init__(self, gid=DEFALUT_GROUP_ID):$/;"	m	class:StatCollector
__init__	switch.py	/^    def __init__(self, swid, gid, type='EDGE', num_port=0):$/;"	m	class:EdgeSwitch
__init__	switch.py	/^    def __init__(self, swid, type, num_port=0):$/;"	m	class:Switch
__init__	switch.py	/^    def __init__(self, swid, type="AGG", num_port=0):$/;"	m	class:AggSwitch
__init__	switch.py	/^    def __init__(self, swid, type="CORE", num_port=0):$/;"	m	class:CoreSwitch
__init__	topo.py	/^    def __init__(self, k):$/;"	m	class:FatTree
__init__	topo.py	/^    def __init__(self, n, m, seed=None):$/;"	m	class:Random
__init__	topo.py	/^    def __init__(self, name, num_port=16):$/;"	m	class:Topo
__init__	topo.py	/^    def __init__(self, num_sw=16, num_port=4):$/;"	m	class:Flat
__init__	utility/cut.py	/^    def __init__(self):$/;"	m	class:Cut
__init__	vm.py	/^    def __init__(self, vmid, swid):$/;"	m	class:VM
addFP	statCollector.py	/^    def addFP(self, num=1):$/;"	m	class:StatCollector
addFlowCross	statCollector.py	/^    def addFlowCross(self, flow=1):$/;"	m	class:StatCollector
addFlowLocal	statCollector.py	/^    def addFlowLocal(self, flow=1):$/;"	m	class:StatCollector
addFlowWithin	statCollector.py	/^    def addFlowWithin(self, flow=1):$/;"	m	class:StatCollector
addGroup	dc.py	/^    def addGroup(self, group):$/;"	m	class:DC
addQueryArp	statCollector.py	/^    def addQueryArp(self, num=1):$/;"	m	class:StatCollector
addQueryControlCurrent	statCollector.py	/^    def addQueryControlCurrent(self, num=1):$/;"	m	class:StatCollector
addQueryControlOrigin	statCollector.py	/^    def addQueryControlOrigin(self, num=1):$/;"	m	class:StatCollector
addSwitch	dc.py	/^    def addSwitch(self, sw):$/;"	m	class:DC
addSwitch	group.py	/^    def addSwitch(self, sw):$/;"	m	class:Group
addTN	statCollector.py	/^    def addTN(self, num=1):$/;"	m	class:StatCollector
addTP	statCollector.py	/^    def addTP(self, num=1):$/;"	m	class:StatCollector
addTrafficCross	statCollector.py	/^    def addTrafficCross(self, byte):$/;"	m	class:StatCollector
addTrafficLocal	statCollector.py	/^    def addTrafficLocal(self, byte):$/;"	m	class:StatCollector
addTrafficWithin	statCollector.py	/^    def addTrafficWithin(self, byte):$/;"	m	class:StatCollector
addVM	dc.py	/^    def addVM(self, vm):$/;"	m	class:DC
addVM	switch.py	/^    def addVM(self, vm):$/;"	m	class:EdgeSwitch
aggregateRecord	utility/preprocess.py	/^def aggregateRecord(fn_in, fn_out):$/;"	f
bcut	utility/cut.py	/^    def bcut(self, node_set):$/;"	m	class:Cut
bf	bf.py	/^    bf = BloomFilter(num_bytes=125, num_probes=14, iterable=states)$/;"	v	class:BloomFilter_32k
c	bf.py	/^    c = ''.join(format(x, '08b') for x in bf.array)$/;"	v	class:BloomFilter_32k
c	utility/cut.py	/^    c = Cut()$/;"	v	class:Cut
checker	bf.py	/^    checker = SpellChecker(glob('\/Users\/raymondhettinger\/dictionary\/english.?'))$/;"	v	class:BloomFilter_32k
doCount	utility/countPkt.py	/^def doCount(fn):$/;"	f
doParser	sim.py	/^def doParser():$/;"	f
exportPng	topo.py	/^    def exportPng(self, fn='test.png'):$/;"	m	class:Topo
exportSW	topo.py	/^    def exportSW(self, k, switchfile='switch.txt'):$/;"	m	class:Topo
extractRecordFromTrace	utility/preprocess.py	/^def extractRecordFromTrace(fn_in, fn_out):$/;"	f
find_misspellings	bf.py	/^    def find_misspellings(self, text):$/;"	m	class:SpellChecker
flat	topo.py	/^    flat = Flat()$/;"	v
fn_in	utility/countPkt.py	/^    fn_in = "..\/result\/traffic_record_per1hour"$/;"	v
genAffinityFile	utility/cut.py	/^    def genAffinityFile(self, num_node=10, num_entry=100, max_weight=100, fn_out="test_affinity.txt"):$/;"	m	class:Cut
genGroupFromTraffic	dc.py	/^    def genGroupFromTraffic(self, trafficfile):$/;"	m	class:DC
genGroupRandom	dc.py	/^    def genGroupRandom(self, num_group=4):$/;"	m	class:DC
genRandomAgg	utility/preprocess.py	/^def genRandomAgg(num_host, fn_out):$/;"	f
genSWAffinity	utility/preprocess.py	/^def genSWAffinity(fn_in="host_flow_oct.agg.txt", fn_affinity="sw_affinity.txt",fn_map="host_sw_map.txt",num_host=6509):$/;"	f
getAvgH	dc.py	/^    def getAvgH(self):$/;"	m	class:DC
getFlowId	utility/preprocess.py	/^def getFlowId(max_id):$/;"	f
getFocus	utility/preprocess.py	/^def getFocus(fn_in="sw_affinity.txt"):$/;"	f
getGid	switch.py	/^    def getGid(self):$/;"	m	class:EdgeSwitch
getSW	dc.py	/^    def getSW(self, id):$/;"	m	class:DC
getSWid	vm.py	/^    def getSWid(self):$/;"	m	class:VM
get_probes	bf.py	/^    def get_probes(self, key):$/;"	m	class:BloomFilter
get_probes	bf.py	/^    def get_probes(self, key):$/;"	m	class:BloomFilter_128
get_probes	bf.py	/^    def get_probes(self, key):$/;"	m	class:BloomFilter_256
get_probes	bf.py	/^    def get_probes(self, key):$/;"	m	class:BloomFilter_32k
get_probes	bf.py	/^    def get_probes(self, key):$/;"	m	class:BloomFilter_4k
getid	switch.py	/^    def getid(self):$/;"	m	class:Switch
getid	vm.py	/^    def getid(self):$/;"	m	class:VM
group	group.py	/^    group = Group()$/;"	v
hasSWbyMe	group.py	/^    def hasSWbyMe(self, sw):$/;"	m	class:Group
hasVM	switch.py	/^    def hasVM(self, vm):$/;"	m	class:EdgeSwitch
hasVMbyBF	switch.py	/^    def hasVMbyBF(self, vm):$/;"	m	class:EdgeSwitch
help	utility/preprocess.py	/^                      metavar="MODE")$/;"	v
help	utility/preprocess.py	/^            help="number of hosts")$/;"	v
importFrom	topo.py	/^    def importFrom(self,fn):$/;"	m	class:Topo
info	topo.py	/^    def info(self):$/;"	m	class:Topo
kcut	utility/cut.py	/^    def kcut(self, fn_in="sw_undirectional_affinity.txt", fn_metics="metis_input.txt"):$/;"	m	class:Cut
m	bf.py	/^    m = sum(''.join(sample(ascii_letters, 8)) in bf for i in range(trials))$/;"	v	class:BloomFilter_32k
m	bf.py	/^    m = sum(state in bf for state in states)$/;"	v	class:BloomFilter_32k
parser	result/metis_result/processMetisOutput.py	/^    parser = OptionParser(usage="Usage: %prog [-i FILE][-o FILE]", version="%prog 1.0")$/;"	v
parser	utility/cut.py	/^    parser = OptionParser(usage="usage: %prog [-i FILE][-o FILE][-m KCUT|BCUT|GEN]", version="%prog 1.0")$/;"	v	class:Cut
parser	utility/preprocess.py	/^    parser = OptionParser(usage="Usage: %prog [-i FILE][-o FILE][-n NUM][-m EXTRACT|AGG|AFFINITY|FOCUS|SCALE|RANDOM]", version="%prog 1.0")$/;"	v
parser	utility/processMetisOutput.py	/^    parser = OptionParser(usage="Usage: %prog [-i FILE][-o FILE]", version="%prog 1.0")$/;"	v
processMetisPartition	result/metis_result/processMetisOutput.py	/^def processMetisPartition(fn_in, fn_out):$/;"	f
processMetisPartition	utility/processMetisOutput.py	/^def processMetisPartition(fn_in, fn_out):$/;"	f
readinEdgeSWInfo	dc.py	/^    def readinEdgeSWInfo(self, switchfile):$/;"	m	class:DC
readinVMInfo	dc.py	/^    def readinVMInfo(self, vmfile):$/;"	m	class:DC
removeSwitch	group.py	/^    def removeSwitch(self, sw):$/;"	m	class:Group
removeVM	switch.py	/^    def removeVM(self, vm):$/;"	m	class:EdgeSwitch
resetStat	statCollector.py	/^    def resetStat(self):$/;"	m	class:StatCollector
scaleData	utility/preprocess.py	/^def scaleData(fn_in="host.seed.agg.txt", fn_out="host.scale.agg.txt",scale=10):$/;"	f
sendVMTraffic	dc.py	/^    def sendVMTraffic(self, src, dst, flow, oct):$/;"	m	class:DC
setGid	switch.py	/^    def setGid(self, gid):$/;"	m	class:EdgeSwitch
setSWid	vm.py	/^    def setSWid(self, swid):$/;"	m	class:VM
setid	switch.py	/^    def setid(self, swid):$/;"	m	class:Switch
setid	vm.py	/^    def setid(self, vmid):$/;"	m	class:VM
showInfo	dc.py	/^    def showInfo(self):$/;"	m	class:DC
showInfo	group.py	/^    def showInfo(self):$/;"	m	class:Group
showStat	dc.py	/^    def showStat(self):$/;"	m	class:DC
showStat	group.py	/^    def showStat(self):$/;"	m	class:Group
showStat	statCollector.py	/^    def showStat(self):$/;"	m	class:StatCollector
stat	statCollector.py	/^    stat = StatCollector()$/;"	v
testAuto	sim.py	/^def testAuto(num_sw=16, num_port=48, num_group=4, num_tries=10000, control_threshold=0.9):$/;"	f
testManu	sim.py	/^def testManu(host_file='host_sw_map.txt', sw_file='metis_input.txt.part.10', trace_file='flow_anon_2008-01-01.agg.txt'):$/;"	f
testShuffleTraffic	dc.py	/^    def testShuffleTraffic(self, num_test=1000, control_threshold=0.1):$/;"	m	class:DC
testTraffic	dc.py	/^    def testTraffic(self, trafficfile):$/;"	m	class:DC
topo	topo.py	/^    topo = Topo('test')$/;"	v
trials	bf.py	/^    trials = 100000$/;"	v	class:BloomFilter_32k
update	bf.py	/^    def update(self, keys):$/;"	m	class:BloomFilter
updateEdgeSWInfo	dc.py	/^    def updateEdgeSWInfo(self, swid, gid):$/;"	m	class:DC
